image: node:16-alpine

.releases:
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(master|beta)/ && $CI_PIPELINE_SOURCE != 'schedule' && $CI_COMMIT_MESSAGE =~ /^(feat|fix).*/

workflow:
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /^chore\(release\).*/ || $CI_COMMIT_TAG
      when: never
    - when: always

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .pnpm-store

before_script:
  - apk update --quiet
  - apk add --quiet curl git ack
  - curl -LSs https://unpkg.com/@pnpm/self-installer | node
  - pnpm config set store-dir .pnpm-store
  - pnpm set verify-store-integrity false
  - pnpm install --reporter=silent

stages:
  - test
  - build
  - release

variables:
  PACKAGE_REGISTRY_URL: $CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/module

jsonlint:
  stage: test
  script:
    - pnpm --silent exec jsonlint -q --enforce-double-quotes lang module.json
  rules:
    - if: $CI_PIPELINE_SOURCE != 'schedule'
      changes:
          - module.json
          - lang/**/*.json

build:
  stage: build
  script:
    - export VERSION=$(pnpm --silent exec semantic-release --dry-run | ack -io '(?<=The next release version is )(.*)(?=$)') && echo VERSION=$VERSION >> build.env
    - export MANIFEST=$CI_PROJECT_URL/-/raw/$CI_COMMIT_BRANCH/module.json && echo MANIFEST=$MANIFEST >> build.env
    - export DOWNLOAD=$CI_PROJECT_URL/-/releases/v$VERSION/downloads/module.zip && echo DOWNLOAD=$DOWNLOAD >> build.env
    - pnpm run build
  artifacts:
    name: module
    when: on_success
    reports:
      dotenv: build.env
    paths:
      - package.json
      - module.zip
      - module.json
  extends: .releases

publish:
  stage: release
  script:
    - pnpm --silent exec semantic-release
  dependencies:
    - build
  extends: .releases
